<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_ID</name>
          <description></description>
          <defaultValue>__PIC_SURE_CLIENT_ID__</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_SECRET</name>
          <description></description>
          <defaultValue>__PIC_SURE_CLIENT_SECRET__</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_TENANT</name>
          <description></description>
          <defaultValue>avillachlab</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ADMIN_USER_EMAIL</name>
          <description>The email address for the initial admin user.  This should be a Google account.</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MIGRATION_NAME</name>
          <description>Name of the migration to run, see https://github.com/hms-dbmi/PIC-SURE-Migrations or fork it and add your migration</description>
          <defaultValue>GIC-Institution</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT_SPECIFIC_OVERRIDE_REPOSITORY</name>
          <description>Depricated: PIC-SURE is now using a unified frontend with feture flags. See README. This must be the project specific git repository that contains the project specific database migrations and UI overrides in the standard PIC-SURE Override Repository Structure.</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_CONTROL_REPOSITORY</name>
          <description>This must be the project specific release control git repository that contains the git commit hashes that will be built and deployed.</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER</name>
          <description>The email account name that should be used to send outbound email.  The default server is Google's SMTP, so this should be a GMail account.  This field is optional</description>
          <defaultValue>__user@email.com__</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER_PASSWORD</name>
          <description>The password for the account used to send outbound.  This field is optional</description>
          <defaultValue>__YOUR_EMAIL_PASSWORD__</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>TARGET_OBFUSCATION_THRESHOLD</name>
          <description>The aggregate resource will be configured to obfuscate result counts lower than this threshold</description>
          <defaultValue>0</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>OPEN</name>
          <description>PIC-SURE can be used without forcing the user log in. Unauthorized users will have a limited feature set.  See more information on Gitbook: TODO_GITBOOK</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>GENOMIC_FILTER</name>
          <description>Enable the genomic filtering UI which guides users creating genomic queries. Enable if HPDS has been loaded with Genomic data. </description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>API</name>
          <description>Shows the user information on how to use the API and allows them to access their LONG_TERM_TOKEN.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>ALLOW_EXPORT</name>
          <description>This enables the prepare for analysis button which guides the user through your export process. There are a few different settings below to control how the user may receive their data in the end.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DOWNLOAD_AS_CSV</name>
          <description>Allows the user to download their data at the end of the export process as a CSV file.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SHOW_VARIABLE_EXPORT</name>
          <description>Allow adding export variables via the search results UI.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SHOW_VARIABLE_HIERARCHY</name>
          <description>Shows the hierarchy button for each search result and enables the hierarchy screen in the export process.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DOWNLOAD_AS_PFB</name>
          <description>Allows the user to download their data at the end of the export process as a PFB file.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DATA_REQUESTS</name>
          <description>Enables data request functionality.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>VARIANT_EXPLORER</name>
          <description>Enable the variant explorer. Only enable if HPDS has been loaded with Genomic data. </description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>VARIANT_EXPLORER_TYPE</name>
          <description>Aggregate is recommended.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>aggregate</string>
              <string>full</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXPLORER_MAX_COUNT</name>
          <description>Max amount of data point for the variant explorer.</description>
          <defaultValue>10000</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VARIANT_EXPLORER_EXCLUDE_COLUMNS</name>
          <description>Advanced: An array of columns to exclude in the variant explorer. 
The value must be in an array format, for example: [&quot;AN&quot;]  </description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>TOUR</name>
          <description>Enable the tour feature which guides the user through the application.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TOUR_SEARCH_TERM</name>
          <description>The tour preforms a search. You can specify the search term here.</description>
          <defaultValue>age</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>import groovy.json.JsonSlurper;

def retrieveBuildSpecId;
def pipelineBuildId;

// variables for scm hashes
def micro_app_ref = &apos;&apos;
def pic_sure_ref = &apos;&apos;
def psu_ref = &apos;&apos;
def psm_ref = &apos;&apos;
def psf_ref = &apos;&apos;


pipeline {
    agent any 
    stages {
        stage(&apos;Set Project Specific Repositories&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                        sed -i &quot;s|__PROJECT_SPECIFIC_OVERRIDE_REPO__|$env.PROJECT_SPECIFIC_OVERRIDE_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                        sed -i &quot;s|__RELEASE_CONTROL_REPO__|$env.RELEASE_CONTROL_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                        sed -i &quot;s|__PROJECT_SPECIFIC_MIGRATION_NAME__|$env.MIGRATION_NAME|g&quot; /var/jenkins_home/config.xml
                    &quot;&quot;&quot;
                    Jenkins.instance.doReload()
                },
                createFrontendEnvFile: {
                        script {
                            touch .env
                            echo &quot;VITE_AUTH0_CLIENT_SECRET=$env.AUTH0_CLIENT_SECRET&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH0_TENANT=$env.AUTH0_TENANT&quot; &gt;&gt; .env
                            echo &quot;VITE_ADMIN_USER_EMAIL=$env.ADMIN_USER_EMAIL&quot; &gt;&gt; .env
                            echo &quot;VITE_PROJECT_SPECIFIC_OVERRIDE_REPOSITORY=$env.PROJECT_SPECIFIC_OVERRIDE_REPOSITORY&quot; &gt;&gt; .env
                            echo &quot;VITE_RELEASE_CONTROL_REPOSITORY=$env.RELEASE_CONTROL_REPOSITORY&quot; &gt;&gt; .env
                            echo &quot;VITE_OUTBOUND_EMAIL_USER=$env.OUTBOUND_EMAIL_USER&quot; &gt;&gt; .env
                            echo &quot;VITE_OUTBOUND_EMAIL_USER_PASSWORD=$env.OUTBOUND_EMAIL_USER_PASSWORD&quot; &gt;&gt; .env
                            echo &quot;VITE_OPEN=$env.OPEN&quot; &gt;&gt; .env
                            echo &quot;VITE_GENOMIC_FILTER=$env.GENOMIC_FILTER&quot; &gt;&gt; .env
                            echo &quot;VITE_API=$env.API&quot; &gt;&gt; .env
                            echo &quot;VITE_ALLOW_EXPORT=$env.ALLOW_EXPORT&quot; &gt;&gt; .env
                            echo &quot;VITE_DOWNLOAD_AS_CSV=$env.DOWNLOAD_AS_CSV&quot; &gt;&gt; .env
                            echo &quot;VITE_SHOW_VARIABLE_EXPORT=$env.SHOW_VARIABLE_EXPORT&quot; &gt;&gt; .env
                            echo &quot;VITE_SHOW_VARIABLE_HIERARCHY=$env.SHOW_VARIABLE_HIERARCHY&quot; &gt;&gt; .env
                            echo &quot;VITE_DOWNLOAD_AS_PFB=$env.DOWNLOAD_AS_PFB&quot; &gt;&gt; .env
                            echo &quot;VITE_DATA_REQUESTS=$env.DATA_REQUESTS&quot; &gt;&gt; .env
                            echo &quot;VITE_VARIANT_EXPLORER=$env.VARIANT_EXPLORER&quot; &gt;&gt; .env
                            echo &quot;VITE_VARIANT_EXPLORER_TYPE=$env.VARIANT_EXPLORER_TYPE&quot; &gt;&gt; .env
                            echo &quot;VITE_EXPLORER_MAX_COUNT=$env.EXPLORER_MAX_COUNT&quot; &gt;&gt; .env
                            echo &quot;VITE_VARIANT_EXPLORER_EXCLUDE_COLUMNS=$env.VARIANT_EXPLORER_EXCLUDE_COLUMNS&quot; &gt;&gt; .env
                            echo &quot;VITE_TOUR=$env.TOUR&quot; &gt;&gt; .env
                            echo &quot;VITE_TOUR_SEARCH_TERM=$env.TOUR_SEARCH_TERM&quot; &gt;&gt; .env
                            echo &quot;#Login Provider (You may add as many as you would like):&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH_PROVIDER_MODULE_GOOGLE=true&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH_PROVIDER_MODULE_GOOGLE_TYPE=AUTH0&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH_PROVIDER_MODULE_GOOGLE_CLIENTID=$env.AUTH0_CLIENT_ID&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH_PROVIDER_MODULE_GOOGLE_CONNECTION=google-oauth2&quot; &gt;&gt; .env
                            echo &quot;VITE_AUTH_PROVIDER_MODULE_GOOGLE_DESCRIPTION=&apos;Login&apos;&quot; &gt;&gt; .env
                            chmod +wr .env
                            cp .env /usr/local/docker-config/httpd/.env
                        }
                    }
            }
        }
        stage(&apos;Initial Config and Build&apos;) { 
            steps {
                parallel (
                    picsureBuild: {
                        script {
                            def result = build job: &apos;PIC-SURE Pipeline&apos;
                        }
                    },
                    auth0Config: {
                        script {
                            def result = build job: &apos;Configure Auth0 Integration&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_ID&apos;, value:env.AUTH0_CLIENT_ID],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_SECRET&apos;, value: env.AUTH0_CLIENT_SECRET]]
                        }
                    },
		    		emailConfig: {
                        script {
                            def result = build job: &apos;Configure Outbound Email Settings&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER&apos;, value:env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL_FROM&apos;, value: env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER_PASSWORD&apos;, value: env.OUTBOUND_EMAIL_USER_PASSWORD]]

                        }
                    }
                )
            }
        }
        
      	stage(&apos;Retrieve Build Spec&apos;) { 
      	 steps {
	        script {
	            def result = build job: &apos;Retrieve Build Spec&apos;
	            retrieveBuildSpecId = result.number
	        }
	        script {
	            copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
	            sh &apos;cat build-spec.json&apos;
	            sh &apos;cat pipeline_git_commit.txt&apos;
	            sh &apos;pwd&apos;
	            sh &apos;ls&apos;
	            def path = pwd()
	            def filePath = path + &apos;/build-spec.json&apos;
	            echo filePath
	            def buildSpec = new JsonSlurper().parse(new File(filePath))
	    
	            for(def build : buildSpec.application){
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSAMA&quot;)) {
	                   micro_app_ref = build.git_hash
	                   echo &apos;micro_app_ref &apos; + micro_app_ref
	                }
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSU&quot;)) {
	                   psu_ref = build.git_hash
	                   echo &apos;psu_ref &apos; + psu_ref
	                }
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSA&quot;)) {
	                   pic_sure_ref = build.git_hash
	                   echo &apos;pic_sure_ref &apos; + pic_sure_ref
	                }
                    if(build.project_job_git_key.equalsIgnoreCase(&quot;PSF&quot;)) {
	                   psf_ref = build.git_hash
	                   echo &apos;psf_ref &apos; + psf_ref
	                }
                    if(build.project_job_git_key.equalsIgnoreCase(&quot;PSM&quot;)) {
	                   psm_ref = build.git_hash
	                   echo &apos;psm_ref &apos; + psm_ref
	                }
	            }
	            if(micro_app_ref.isEmpty() || pic_sure_ref.isEmpty() ||
                   (psm_ref.isEmpty() &amp;&amp; !psf_ref.isEmpty()) ||
                   (psu_ref.isEmpty() &amp;&amp; !psf_ref.isEmpty()) ||
                   (!psf_ref.isEmpty() &amp;&amp; psm_ref.isEmpty())) {   
	                currentBuild.result = &apos;ABORTED&apos;
	                echo &apos;micro_app_ref = &apos; + micro_app_ref
	                echo &apos;psu_ref = &apos; + psu_ref
	                echo &apos;pic_sure_ref = &apos; + pic_sure_ref
                    echo &apos;psf_ref = &apos; + psf_ref
                    echo &apos;psm_ref = &apos; + psm_ref
	                error(&apos;Build Spec Not configured correctly!&apos;)
	            }
	        }
        }
    }
    
    stage(&apos;Auth Schema Migration&apos;) { 
 		steps {
	 		node("master") {   
	 			script {
			        checkout([$class: &apos;GitSCM&apos;, branches: [[name: micro_app_ref ]],
			            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure-auth-microapp&apos;]]])
			        //git url: &apos;https://github.com/hms-dbmi/pic-sure-auth-microapp&apos;
			        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/auth:/opt/flyway-migrations/auth &quot;--entrypoint=&quot; &apos;) {
			            sh &quot;rm -rf /opt/flyway-migrations/auth/sql&quot;
			            sh &quot;cp -R ./pic-sure-auth-db/db/sql /opt/flyway-migrations/auth/sql&quot;
			            sh &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf migrate&quot;
			            sleep(time:10,unit:&quot;SECONDS&quot;) 
			        }
		        }
	        }
        }
    }
    stage(&apos;Picsure Schema Migration&apos;) {
	     steps {
	     	node("master") {   
	 			script {
                    if 
			        checkout([$class: &apos;GitSCM&apos;, branches: [[name: pic_sure_ref ]],
			            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure&apos;]]])
			        //git url: &apos;https://github.com/hms-dbmi/pic-sure&apos;
			        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/picsure:/opt/flyway-migrations/picsure &quot;--entrypoint=&quot; &apos;) {
			            sh &quot;rm -rf /opt/flyway-migrations/picsure/sql&quot;
			            sh &quot;cp -R ./pic-sure-api-data/src/main/resources/db/sql /opt/flyway-migrations/picsure/sql&quot;
			            sh &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf migrate&quot;
			            sleep(time:10,unit:&quot;SECONDS&quot;) 
			        }
		        }
	        }
        }
    }
    
     stage(&apos;Aggregate Resource Configuration&apos;) { 
           steps {
               script {
                   def result = build job: &apos;Create PIC-SURE Aggregate Resource&apos;, parameters: [
                       [$class: &apos;StringParameterValue&apos;, name: &apos;RESOURCE_NAME&apos;, value:&quot;PIC-SURE Aggregate Resource&quot;],
                       [$class: &apos;StringParameterValue&apos;, name: &apos;TARGET_OBFUSCATION_THRESHOLD&apos;, value: env.TARGET_OBFUSCATION_THRESHOLD],
                       [$class: &apos;StringParameterValue&apos;, name: &apos;git_hash&apos;, value: pic_sure_ref]]

               }
           }
      }
    
    
    stage(&apos;Project Specific Migrations&apos;) {
	    steps {
	    	node("master") {   
	 			script {
                    if (psm_ref.isEmpty()) {
                        checkout([$class: &apos;GitSCM&apos;, branches: [[name: psu_ref ]],
                            userRemoteConfigs: [[url: env.project_specific_override_repo]]])
                        //git url: env.project_specific_override_repo
                        sh &quot;&quot;&quot;
                            sed -i &quot;s/__APPLICATION_UUID__/`cat /usr/local/docker-config/APP_ID_HEX`/g&quot; ./custom-migrations/auth/*.sql
                            sed -i &quot;s/__RESOURCE_UUID__/`cat /usr/local/docker-config/RESOURCE_ID_HEX`/g&quot; ./custom-migrations/picsure/*.sql
                        &quot;&quot;&quot;
                        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/picsure:/opt/flyway-migrations/picsure &quot;--entrypoint=&quot; &apos;) {
                            sh &quot;rm -rf /opt/flyway-migrations/picsure/sql&quot;
                            sh &quot;cp -R ./custom-migrations/picsure /opt/flyway-migrations/picsure/sql&quot;
                            sh &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf -table=flyway_custom_schema_history migrate&quot;
                            sleep(time:10,unit:&quot;SECONDS&quot;) 
                        }
                        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/auth:/opt/flyway-migrations/auth &quot;--entrypoint=&quot; &apos;) {
                            sh &quot;rm -rf /opt/flyway-migrations/auth/sql&quot;
                            sh &quot;cp -R ./custom-migrations/auth /opt/flyway-migrations/auth/sql&quot;
                            sh &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf -table=flyway_custom_schema_history migrate&quot;
                            sleep(time:10,unit:&quot;SECONDS&quot;) 
                        }
                    } else {
                        checkout([$class: &apos;GitSCM&apos;, branches: [[name: psm_ref ]],
                            userRemoteConfigs: [[url: https://github.com/hms-dbmi/PIC-SURE-Migrations]]])
                        sh &quot;&quot;&quot;
                            sed -i &quot;s/__APPLICATION_UUID__/`cat /usr/local/docker-config/APP_ID_HEX`/g&quot; ./$env.MIGRATION_NAME/auth/*.sql
                            sed -i &quot;s/__RESOURCE_UUID__/`cat /usr/local/docker-config/RESOURCE_ID_HEX`/g&quot; ./$env.MIGRATION_NAME/picsure/*.sql
                        &quot;&quot;&quot;
                        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/picsure:/opt/flyway-migrations/picsure &quot;--entrypoint=&quot; &apos;) {
                            sh &quot;rm -rf /opt/flyway-migrations/picsure/sql&quot;
                            sh &quot;cp -R ./$env.MIGRATION_NAME/picsure /opt/flyway-migrations/picsure/sql&quot;
                            sh &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf -table=flyway_custom_schema_history migrate&quot;
                            sleep(time:10,unit:&quot;SECONDS&quot;) 
                        }
                        docker.image(&apos;dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.0&apos;).inside(&apos;--network=picsure -v $DOCKER_CONFIG_DIR/flyway/auth:/opt/flyway-migrations/auth &quot;--entrypoint=&quot; &apos;) {
                            sh &quot;rm -rf /opt/flyway-migrations/auth/sql&quot;
                            sh &quot;cp -R ./$env.MIGRATION_NAME/auth /opt/flyway-migrations/auth/sql&quot;
                            sh &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf -table=flyway_custom_schema_history migrate&quot;
                            sleep(time:10,unit:&quot;SECONDS&quot;) 
                        }
                    }
		        }
	        }
        }
    }
        
        
     stage(&apos;Post Migration Configs&apos;) { 
         steps {
             parallel (
                 adminConfig: {
                     script {
                         def result = build job: &apos;Create Admin User&apos;, parameters: [
                             [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL&apos;, value:env.ADMIN_USER_EMAIL],
                             [$class: &apos;StringParameterValue&apos;, name: &apos;CONNECTION_LABEL&apos;, value: &quot;Google&quot;]]
                     }
                 },
                 tokenIntroToken: {
                     script {
                         def result = build job: &apos;Configure PIC-SURE Token Introspection Token&apos;
                     }
                 },
                 encryptionKey: {
                     script {
                         def result = build job: &apos;Create HPDS Encryption Key&apos;
                     }
                 }
             )
         }
     }
        stage(&apos;Load Demo Data and Deploy&apos;) { 
            steps {
                script {
                    def result = build job: &apos;Start PIC-SURE&apos;
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
