<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1207.ve6191ff089f8">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_ID</name>
          <defaultValue>__PIC_SURE_CLIENT_ID__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_SECRET</name>
          <defaultValue>__PIC_SURE_CLIENT_SECRET__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_TENANT</name>
          <defaultValue>avillachlab</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ADMIN_USER_EMAIL</name>
          <description>The email address for the initial admin user.  This should be a Google account.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT_SPECIFIC_OVERRIDE_REPOSITORY</name>
          <description>This must be the project specific git repository that contains the project specific database migrations and UI overrides in the standard PIC-SURE Override Repository Structure.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_CONTROL_REPOSITORY</name>
          <description>This must be the project specific release control git repository that contains the git commit hashes that will be built and deployed.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER</name>
          <description>The email account name that should be used to send outbound email.  The default server is Google&apos;s SMTP, so this should be a GMail account.  This field is optional</description>
          <defaultValue>__user@email.com__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER_PASSWORD</name>
          <description>The password for the account used to send outbound.  This field is optional</description>
          <defaultValue>__YOUR_EMAIL_PASSWORD__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TARGET_OBFUSCATION_THRESHOLD</name>
          <description>The aggregate resource will be configured to obfuscate result counts lower than this threshold</description>
          <defaultValue>10</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>import groovy.json.JsonSlurper;

def retrieveBuildSpecId;
def pipelineBuildId;

// variables for scm hashes
def micro_app_ref = &apos;&apos;
def pic_sure_ref = &apos;&apos;
def psu_ref = &apos;&apos;


pipeline {
    agent any 
    stages {
        stage(&apos;Set Project Specific Repositories&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                        sed -i &quot;s|__PROJECT_SPECIFIC_OVERRIDE_REPO__|$env.PROJECT_SPECIFIC_OVERRIDE_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                        sed -i &quot;s|__RELEASE_CONTROL_REPO__|$env.RELEASE_CONTROL_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                    &quot;&quot;&quot;
                    Jenkins.instance.doReload()
                }
            }
        }
        stage(&apos;Initial Config and Build&apos;) { 
            steps {
                parallel (
                    picsureBuild: {
                        script {
                            def result = build job: &apos;PIC-SURE Pipeline&apos;
                        }
                    },
                    auth0Config: {
                        script {
                            def result = build job: &apos;Configure Auth0 Integration&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_ID&apos;, value:env.AUTH0_CLIENT_ID],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_SECRET&apos;, value: env.AUTH0_CLIENT_SECRET]]
                        }
                    },
		    		emailConfig: {
                        script {
                            def result = build job: &apos;Configure Outbound Email Settings&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER&apos;, value:env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL_FROM&apos;, value: env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER_PASSWORD&apos;, value: env.OUTBOUND_EMAIL_USER_PASSWORD]]

                        }
                    }
                )
            }
        }
        
      	stage(&apos;Retrieve Build Spec&apos;) { 
      	 steps {
	        script {
	            def result = build job: &apos;Retrieve Build Spec&apos;
	            retrieveBuildSpecId = result.number
	        }
	        script {
	            copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
	            sh &apos;cat build-spec.json&apos;
	            sh &apos;cat pipeline_git_commit.txt&apos;
	            sh &apos;pwd&apos;
	            sh &apos;ls&apos;
	            def path = pwd()
	            def filePath = path + &apos;/build-spec.json&apos;
	            echo filePath
	            def buildSpec = new JsonSlurper().parse(new File(filePath))
	    
	            for(def build : buildSpec.application){
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSAMA&quot;)) {
	                   micro_app_ref = build.git_hash
	                   echo &apos;micro_app_ref &apos; + micro_app_ref
	                }
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSU&quot;)) {
	                   psu_ref = build.git_hash
	                   echo &apos;psu_ref &apos; + psu_ref
	                }
	                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSA&quot;)) {
	                   pic_sure_ref = build.git_hash
	                   echo &apos;pic_sure_ref &apos; + pic_sure_ref
	                }
	            }
	            if(micro_app_ref.isEmpty() || pic_sure_ref.isEmpty() || psu_ref.isEmpty()) {
	                currentBuild.result = &apos;ABORTED&apos;
	                echo &apos;micro_app_ref = &apos; + micro_app_ref
	                echo &apos;psu_ref = &apos; + psu_ref
	                echo &apos;pic_sure_ref = &apos; + pic_sure_ref
	                error(&apos;Build Spec Not configured correctly!&apos;)
	            }
	        }
        }
    }
    
               stage(&apos;Auth Schema Migration&apos;) { 
 		steps {
	 		node(&quot;master&quot;) {   
	 			script {
			        checkout([$class: &apos;GitSCM&apos;, branches: [[name: micro_app_ref ]],
			            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure-auth-microapp&apos;]]])
			        
			        dir(&apos;pic-sure-auth-db&apos;){
			          sh &apos;&apos;&apos;
			            docker  run --security-opt label=disable -d --name auth-dbmigration --network=picsure -v ./db/sql:/opt/flyway-migrations/auth/sql -v /usr/local/docker-config/flyway/auth:/opt/flyway-migrations/auth     dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
			            docker  exec -it auth-dbmigration bash -c &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf migrate&quot;
			          &apos;&apos;&apos;          
			        }
        
        		
		        }
	        }
        }
    }
    
        stage(&apos;Picsure Schema Migration&apos;) {
	     steps {
	     	node(&quot;master&quot;) {   
	 			script {
			        checkout([$class: &apos;GitSCM&apos;, branches: [[name: pic_sure_ref ]],
			            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure&apos;]]])
					        dir(&apos;pic-sure-api-data&apos;){
					        sh &apos;&apos;&apos;
					          docker  run --security-opt label=disable -d --name picsure-dbmigration --network=picsure -v ./src/main/resources/db/sql:/opt/flyway-migrations/picsure/sql -v /usr/local/docker-config/flyway/picsure:/opt/flyway-migrations/picsure    dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
					          docker  exec -it picsure-dbmigration bash -c &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf migrate&quot;
					        &apos;&apos;&apos;          
					      }
		        }
	        }
        }
    }  
    
     stage(&apos;Aggregate Resource Configuration&apos;) { 
           steps {
               script {
                   def result = build job: &apos;Create PIC-SURE Aggregate Resource&apos;, parameters: [
                       [$class: &apos;StringParameterValue&apos;, name: &apos;RESOURCE_NAME&apos;, value:&quot;PIC-SURE Aggregate Resource&quot;],
                       [$class: &apos;StringParameterValue&apos;, name: &apos;TARGET_OBFUSCATION_THRESHOLD&apos;, value: env.TARGET_OBFUSCATION_THRESHOLD],
                       [$class: &apos;StringParameterValue&apos;, name: &apos;git_hash&apos;, value: pic_sure_ref]]

               }
           }
      }
    
    
       stage(&apos;Project Specific Migrations&apos;) {
	    steps {
	    	node(&quot;master&quot;) {   
	 			script {
			        checkout([$class: &apos;GitSCM&apos;, branches: [[name: psu_ref ]],
			            userRemoteConfigs: [[url: env.project_specific_override_repo]]])
			        
			        sh &quot;&quot;&quot;
			            sed -i &quot;s/__APPLICATION_UUID__/`cat /usr/local/docker-config/APP_ID_HEX`/g&quot; ./custom-migrations/auth/*.sql
			            sed -i &quot;s/__RESOURCE_UUID__/`cat /usr/local/docker-config/RESOURCE_ID_HEX`/g&quot; ./custom-migrations/picsure/*.sql
			        &quot;&quot;&quot;
						        
				      dir(&apos;custom-migrations&apos;){
				        sh &apos;&apos;&apos;
				          docker  run --security-opt label=disable -d --name picsure-custom-dbmigration --network=picsure -v ./picsure:/opt/flyway-migrations/picsure/sql -v /usr/local/docker-config/flyway/picsure:/opt/flyway-migrations/picsure dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
				          docker  exec -it picsure-custom-dbmigration bash -c &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf -table=flyway_custom_schema_history migrate&quot;
				        &apos;&apos;&apos;          
				      }
				      dir(&apos;custom-migrations&apos;){
				        sh &apos;&apos;&apos;
				          docker  run --security-opt label=disable -d --name auth-custom-dbmigration --network=picsure -v ./auth:/opt/flyway-migrations/auth/sql -v /usr/local/docker-config/flyway/auth:/opt/flyway-migrations/auth dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
				          docker  exec -it auth-custom-dbmigration bash -c &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf -table=flyway_custom_schema_history migrate&quot;
				        &apos;&apos;&apos;          
				      }			        
		        }
	        }
        }
    }
    
    stage(&apos;Stop-Remove-MigrationContainers&apos;) {
        steps {
            script {

                      sh &apos;&apos;&apos;
                                        echo &quot;finally remove all the db migration containers&quot;

                                        AUTH_DB_CONTAINER=&quot;auth-dbmigration&quot;
                                        AUTH_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$AUTH_DB_CONTAINER&quot;)&quot;
                                        echo $AUTH_DB_CONTAINER_EXITS

                                        if [ ! -z &quot;$AUTH_DB_CONTAINER_EXITS&quot; ]; then
                                            docker  stop $AUTH_DB_CONTAINER_EXITS &amp;&amp; docker  rm $AUTH_DB_CONTAINER_EXITS
                                        fi

                                        PICSURE_DB_CONTAINER=&quot;picsure-dbmigration&quot;
                                        PICSURE_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$PICSURE_DB_CONTAINER&quot;)&quot;
                                        echo $PICSURE_DB_CONTAINER_EXITS

                                        if [ ! -z &quot;$PICSURE_DB_CONTAINER_EXITS&quot; ]; then
                                            docker  stop $PICSURE_DB_CONTAINER_EXITS &amp;&amp; docker  rm $PICSURE_DB_CONTAINER_EXITS
                                        fi

                                        AUTH_CUSTOM_DB_CONTAINER=&quot;auth-custom-dbmigration&quot;
                                        AUTH_CUSTOM_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$AUTH_CUSTOM_DB_CONTAINER&quot;)&quot;
                                        echo $AUTH_CUSTOM_DB_CONTAINER_EXITS

                                        if [ ! -z &quot;$AUTH_CUSTOM_DB_CONTAINER_EXITS&quot; ]; then
                                            docker  stop $AUTH_CUSTOM_DB_CONTAINER_EXITS &amp;&amp; docker  rm $AUTH_CUSTOM_DB_CONTAINER_EXITS
                                        fi

                                        PICSURE_CUSTOM_DB_CONTAINER=&quot;picsure-custom-dbmigration&quot;
                                        PICSURE_CUSTOM_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$PICSURE_CUSTOM_DB_CONTAINER&quot;)&quot;
                                        echo $PICSURE_CUSTOM_DB_CONTAINER_EXITS

                                        if [ ! -z &quot;$PICSURE_CUSTOM_DB_CONTAINER_EXITS&quot; ]; then
                                            docker  stop $PICSURE_CUSTOM_DB_CONTAINER_EXITS &amp;&amp; docker  rm $PICSURE_CUSTOM_DB_CONTAINER_EXITS
                                        fi
                                    &apos;&apos;&apos;
            }

        }
    }    
        
        
     stage(&apos;Post Migration Configs&apos;) { 
         steps {
             parallel (
                 adminConfig: {
                     script {
                         def result = build job: &apos;Create Admin User&apos;, parameters: [
                             [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL&apos;, value:env.ADMIN_USER_EMAIL],
                             [$class: &apos;StringParameterValue&apos;, name: &apos;CONNECTION_LABEL&apos;, value: &quot;Google&quot;]]
                     }
                 },
                 tokenIntroToken: {
                     script {
                         def result = build job: &apos;Configure PIC-SURE Token Introspection Token&apos;
                     }
                 },
                 encryptionKey: {
                     script {
                         def result = build job: &apos;Create HPDS Encryption Key&apos;
                     }
                 }
             )
         }
     }
        stage(&apos;Load Demo Data and Deploy&apos;) { 
            steps {
                script {
                    def result = build job: &apos;Start PIC-SURE&apos;
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>