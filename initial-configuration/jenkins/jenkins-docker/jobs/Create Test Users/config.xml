<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@714.v28a_34f8c563f">
      <projectNameList>
        <string>Automation Test</string>
        <string>Run Quality Assurance</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>USER_ROLES</name>
          <description>Pass a list of user roles. Give the list of user roles it will create Test accounts with a valid user token. Those values will be passed in a config.properties file.</description>
          <defaultValue>PIC-SURE User,Admin,PIC-SURE Top Admin</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/jwt-creator.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Maven>
      <targets>clean install</targets>
      <mavenName>Maven Home</mavenName>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Create a user with a specified auth role using a stored procedure
function run_sql_procedure() {
    local user_email=&quot;$1&quot;
    local connection_id=&quot;$2&quot;
    local role_name=&quot;$3&quot;

    docker run -i -v /root/.my.cnf:/root/.my.cnf --network=${MYSQL_NETWORK:-host} mysql mysql -e \
    &quot;CALL CreateUserWithRole(&apos;$user_email&apos;, &apos;$connection_id&apos;, &apos;$role_name&apos;, &apos;{\&quot;email\&quot;: \&quot;$user_email\&quot;}&apos;);&quot; auth
}

# Update user token using generateJwt.jar
function update_user_token() {
    local USERNAME=&quot;$1&quot;
    local DAYSUNTILEXPIRATION=365 # Default value for token expiration

    # Check if secret exists already
    grep client_secret /usr/local/docker-config/wildfly/standalone.xml | cut -d &apos;=&apos; -f 3 | sed &apos;s/[\&quot;/\&gt;]//g&apos; &gt; secret.txt

    # Get the user subject by email
    USER_SUBJECT=$(docker run -i -v /root/.my.cnf:/root/.my.cnf --network=host mysql mysql -N -e \
    &quot;SELECT subject FROM auth.user where email=&apos;$USERNAME&apos;;&quot;)

    # Create a new user token by subject and expiry
    user_token=$(java -jar target/generateJwt.jar secret.txt sub &quot;${USER_SUBJECT}&quot; ${DAYSUNTILEXPIRATION} day | grep -v &quot;Generating&quot;)

    # Update user with the new token
    docker run -i -v /root/.my.cnf:/root/.my.cnf --network=${MYSQL_NETWORK:-host} mysql mysql -e \
    &quot;update auth.user set long_term_token=&apos;$user_token&apos; where email=&apos;$USERNAME&apos;;&quot;

    # Return the newly generated user token
    echo &quot;$user_token&quot;
}

function flattern_user_type() {
    local USER_TYPE=&quot;$1&quot;

    local userType=$(echo &quot;$USER_TYPE&quot; | tr -d &apos;[:space:]&apos; | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos; | sed &apos;s/[^a-z0-9]*//g&apos;)
    echo &quot;$userType&quot;
}

# Create email dynamically based on role
function convert_user_type_to_email() {
    local FLAT_USER_TYPE=&quot;$1&quot;

    # Transform userType to the email format
    local email=&quot;$FLAT_USER_TYPE&quot;test@pic-sure.org
    echo &quot;$email&quot;
}

# Get current nix internal field separator so we can preserve it
old_ifs=&quot;$IFS&quot;
# Set to ,
IFS=&apos;,&apos;
# Split the string and read into an array
read -ra userTypes &lt;&lt;&lt; &quot;$USER_ROLES&quot;
# Set IFS back to original value
IFS=&quot;$old_ifs&quot;

connection_id=&quot;google-oauth2&quot;
# Loop over the user types
for user_type in &quot;${userTypes[@]}&quot;
do
    echo &quot;Creating user for user type: $user_type&quot;
	flat_user_type=$(flattern_user_type &quot;$user_type&quot;)

    # Create email dynamically based on role
    email=$(convert_user_type_to_email &quot;$flat_user_type&quot;)

    # Run procedure to add user
    run_sql_procedure &quot;$email&quot; &quot;$connection_id&quot; &quot;$user_type&quot;

    # Generate new user&apos;s token
    user_token=$(update_user_token &quot;$email&quot;)

    # Write email=token as key-value pair to the end of a file

    echo &quot;${flat_user_type}_token=$user_token&quot; &gt;&gt; new_config.properties
    echo &quot;${flat_user_type}_email=$email&quot; &gt;&gt; new_config.properties
    echo &quot;${flat_user_type}_type=$user_type&quot; &gt;&gt; new_config.properties

done</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>new_config.properties</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>false</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>