<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_ID</name>
          <description></description>
          <defaultValue>__PIC_SURE_CLIENT_ID__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_CLIENT_SECRET</name>
          <description></description>
          <defaultValue>__PIC_SURE_CLIENT_SECRET__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AUTH0_TENANT</name>
          <description></description>
          <defaultValue>avillachlab</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ADMIN_USER_EMAIL</name>
          <description>The email address for the initial admin user.  This should be a Google account.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT_SPECIFIC_OVERRIDE_REPOSITORY</name>
          <description>This must be the project specific git repository that contains the project specific database migrations and UI overrides in the standard PIC-SURE Override Repository Structure.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_CONTROL_REPOSITORY</name>
          <description>This must be the project specific release control git repository that contains the git commit hashes that will be built and deployed.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER</name>
          <description>The email account name that should be used to send outbound email.  The default server is Google's SMTP, so this should be a GMail account.  This field is optional</description>
          <defaultValue>__user@email.com__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTBOUND_EMAIL_USER_PASSWORD</name>
          <description>The password for the account used to send outbound.  This field is optional</description>
          <defaultValue>__YOUR_EMAIL_PASSWORD__</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>import groovy.json.JsonSlurper;

def retrieveBuildSpecId;
def pipelineBuildId;
def build_hashes = {};
pipeline {
    agent any 
    stages {
        stage(&apos;Set Project Specific Repositories&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                        sed -i &quot;s|__PROJECT_SPECIFIC_OVERRIDE_REPO__|$env.PROJECT_SPECIFIC_OVERRIDE_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                        sed -i &quot;s|__RELEASE_CONTROL_REPO__|$env.RELEASE_CONTROL_REPOSITORY|g&quot; /var/jenkins_home/config.xml
                    &quot;&quot;&quot;
                    Jenkins.instance.doReload()
                }
            }
        }
        stage(&apos;Initial Config and Build&apos;) { 
            steps {
                parallel (
                    dbMigrate: {
                        script {
                            def result = build job: &apos;PIC-SURE Database Migrations&apos;
                        }
                    },
                    picsureBuild: {
                        script {
                            def result = build job: &apos;PIC-SURE Pipeline&apos;
                        }
                    },
                    auth0Config: {
                        script {
                            def result = build job: &apos;Configure Auth0 Integration&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_ID&apos;, value:env.AUTH0_CLIENT_ID],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;AUTH0_CLIENT_SECRET&apos;, value: env.AUTH0_CLIENT_SECRET]]
                        }
                    },
                    addRootCerts: {
                        script {
                            def result = build job: &apos;Create Root Certs in TrustStore&apos;
                        }
                    },
		    emailConfig: {
                        script {
                            def result = build job: &apos;Configure Outbound Email Settings&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER&apos;, value:env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL_FROM&apos;, value: env.OUTBOUND_EMAIL_USER],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;OUTBOUND_EMAIL_USER_PASSWORD&apos;, value: env.OUTBOUND_EMAIL_USER_PASSWORD]]

                        }
                    }
                )
            }
        }
        stage(&apos;Post Migration Configs&apos;) { 
            steps {
                parallel (
                    adminConfig: {
                        script {
                            def result = build job: &apos;Create Admin User&apos;, parameters: [
                                [$class: &apos;StringParameterValue&apos;, name: &apos;EMAIL&apos;, value:env.ADMIN_USER_EMAIL],
                                [$class: &apos;StringParameterValue&apos;, name: &apos;CONNECTION_LABEL&apos;, value: &quot;Google&quot;]]
                        }
                    },
                    tokenIntroToken: {
                        script {
                            def result = build job: &apos;Configure PIC-SURE Token Introspection Token&apos;
                        }
                    },
                    encryptionKey: {
                        script {
                            def result = build job: &apos;Create HPDS Encryption Key&apos;
                        }
                    }
                )
            }
        }
        stage(&apos;Load Demo Data and Deploy&apos;) { 
            steps {
 		script {
                    def result = build job: &apos;Retrieve Build Spec&apos;
                    retrieveBuildSpecId = result.number
                }
		script {
                    copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
                    sh &apos;cat build-spec.json&apos;
                    sh &apos;cat pipeline_git_commit.txt&apos;
                    sh &apos;pwd&apos;
                    def buildSpec = new JsonSlurper().parse(new File(&apos;/var/jenkins_home/workspace/PIC-SURE Pipeline/build-spec.json&apos;))
                    pipelineBuildId = new File(&apos;/var/jenkins_home/workspace/PIC-SURE Pipeline/pipeline_git_commit.txt&apos;).text.trim()
                    for(def build : buildSpec.application){
                        build_hashes[build.project_job_git_key] = build.git_hash
                    }
                }
                script {
                    def result = build job: &apos;Load HPDS Data From CSV&apos;
                }
                script {
                    def result = build job: &apos;Start PIC-SURE&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;pipeline_build_id&apos;, value: pipelineBuildId],[$class: &apos;StringParameterValue&apos;, name: &apos;git_hash&apos;, value: build_hashes[&apos;PSU&apos;]]]
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
