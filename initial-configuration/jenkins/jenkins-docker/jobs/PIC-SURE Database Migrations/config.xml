<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1186.v8def1a_5f3944">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2086.v12b_420f036e5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2086.v12b_420f036e5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>import groovy.json.JsonSlurper;
// variables for scm hashes
def micro_app_ref = &apos;&apos;
def pic_sure_ref = &apos;&apos;
def psu_ref = &apos;&apos;

node {   
    stage(&apos;Retrieve Build Spec&apos;) { 
        script {
            def result = build job: &apos;Retrieve Build Spec&apos;
            retrieveBuildSpecId = result.number
        }
        script {
            copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
            sh &apos;cat build-spec.json&apos;
            sh &apos;cat pipeline_git_commit.txt&apos;
            sh &apos;pwd&apos;
            sh &apos;ls&apos;
            def path = pwd()
            def filePath = path + &apos;/build-spec.json&apos;
            echo filePath
            def buildSpec = new JsonSlurper().parse(new File(filePath))
    
            for(def build : buildSpec.application){
                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSAMA&quot;)) {
                   micro_app_ref = build.git_hash
                   echo &apos;micro_app_ref &apos; + micro_app_ref
                }
                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSU&quot;)) {
                   psu_ref = build.git_hash
                   echo &apos;psu_ref &apos; + psu_ref
                }
                if(build.project_job_git_key.equalsIgnoreCase(&quot;PSA&quot;)) {
                   pic_sure_ref = build.git_hash
                   echo &apos;pic_sure_ref &apos; + pic_sure_ref
                }
            }
            if(micro_app_ref.isEmpty() || pic_sure_ref.isEmpty() || psu_ref.isEmpty()) {
                currentBuild.result = &apos;ABORTED&apos;
                echo &apos;micro_app_ref = &apos; + micro_app_ref
                echo &apos;psu_ref = &apos; + psu_ref
                echo &apos;pic_sure_ref = &apos; + pic_sure_ref
                error(&apos;Build Spec Not configured correctly!&apos;)
            }
        }
    }
    stage(&apos;Auth Schema Migration&apos;) {  
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: micro_app_ref ]],
            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure-auth-microapp&apos;]]])
        //git url: &apos;https://github.com/hms-dbmi/pic-sure-auth-microapp&apos;
        
        
        dir(&apos;pic-sure-auth-db&apos;){
          sh &apos;&apos;&apos;
            docker  run --security-opt label=disable -d --name auth-dbmigration --network=picsure -v ./db/sql:/opt/flyway-migrations/auth/sql -v /usr/local/docker-config/flyway/auth:/opt/flyway-migrations/auth     dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
            docker  exec -it auth-dbmigration bash -c &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf migrate&quot;
          &apos;&apos;&apos;          
        }
    } 
    stage(&apos;Picsure Schema Migration&apos;) {
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: pic_sure_ref ]],
            userRemoteConfigs: [[url: &apos;https://github.com/hms-dbmi/pic-sure&apos;]]])
        //git url: &apos;https://github.com/hms-dbmi/pic-sure&apos;
        
        dir(&apos;pic-sure-api-data&apos;){
        sh &apos;&apos;&apos;
          docker  run --security-opt label=disable -d --name picsure-dbmigration --network=picsure -v ./src/main/resources/db/sql:/opt/flyway-migrations/picsure/sql -v /usr/local/docker-config/flyway/picsure:/opt/flyway-migrations/picsure    dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
          docker  exec -it picsure-dbmigration bash -c &quot;/opt/flyway/flyway -X -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf migrate&quot;
        &apos;&apos;&apos;          
      }
    }
    stage(&apos;Project Specific Migrations&apos;) {
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: psu_ref ]],
            userRemoteConfigs: [[url: env.project_specific_override_repo]]])
        //git url: env.project_specific_override_repo
        sh &quot;&quot;&quot;
            sed -i &quot;s/__APPLICATION_UUID__/`cat /usr/local/docker-config/APP_ID_HEX`/g&quot; ./custom-migrations/auth/*.sql
            sed -i &quot;s/__RESOURCE_UUID__/`cat /usr/local/docker-config/RESOURCE_ID_HEX`/g&quot; ./custom-migrations/picsure/*.sql
        &quot;&quot;&quot;

        dir(&apos;custom-migrations&apos;){
        sh &apos;&apos;&apos;
          docker  run --security-opt label=disable -d --name picsure-custom-dbmigration --network=picsure -v ./picsure:/opt/flyway-migrations/picsure/sql -v /usr/local/docker-config/flyway/picsure:/opt/flyway-migrations/picsure dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
          docker  exec -it picsure-custom-dbmigration bash -c &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/picsure/flyway-picsure.conf -table=flyway_custom_schema_history migrate&quot;
        &apos;&apos;&apos;          
      }
      dir(&apos;custom-migrations&apos;){
        sh &apos;&apos;&apos;
          docker  run --security-opt label=disable -d --name auth-custom-dbmigration --network=picsure -v ./auth:/opt/flyway-migrations/auth/sql -v /usr/local/docker-config/flyway/auth:/opt/flyway-migrations/auth dbmi/pic-sure-db-migrations:pic-sure-db-migration_v1.1
         docker  exec -it auth-custom-dbmigration bash -c &quot;/opt/flyway/flyway -X -baselineOnMigrate=true -configFiles=/opt/flyway-migrations/auth/flyway-auth.conf -table=flyway_custom_schema_history migrate&quot;
        &apos;&apos;&apos;          
      }
    }
    stage(&apos;Clean Workspace&apos;){ 
        
        sh &apos;&apos;&apos;
            echo &quot;finally remove all the db migration containers&quot;
            
            AUTH_DB_CONTAINER=&quot;auth-dbmigration&quot;
            AUTH_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$AUTH_DB_CONTAINER&quot;)&quot;
            echo $AUTH_DB_CONTAINER_EXITS
            
            if [ ! -z &quot;$AUTH_DB_CONTAINER_EXITS&quot; ]; then
                docker  stop $AUTH_DB_CONTAINER_EXITS &amp;&amp; docker  rm $AUTH_DB_CONTAINER_EXITS
            fi
            
            PICSURE_DB_CONTAINER=&quot;picsure-dbmigration&quot;
            PICSURE_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$PICSURE_DB_CONTAINER&quot;)&quot;
            echo $PICSURE_DB_CONTAINER_EXITS
            
            if [ ! -z &quot;$PICSURE_DB_CONTAINER_EXITS&quot; ]; then
                docker  stop $PICSURE_DB_CONTAINER_EXITS &amp;&amp; docker  rm $PICSURE_DB_CONTAINER_EXITS
            fi
            
            AUTH_CUSTOM_DB_CONTAINER=&quot;auth-custom-dbmigration&quot;
            AUTH_CUSTOM_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$AUTH_CUSTOM_DB_CONTAINER&quot;)&quot;
            echo $AUTH_CUSTOM_DB_CONTAINER_EXITS
            
            if [ ! -z &quot;$AUTH_CUSTOM_DB_CONTAINER_EXITS&quot; ]; then
                docker  stop $AUTH_CUSTOM_DB_CONTAINER_EXITS &amp;&amp; docker  rm $AUTH_CUSTOM_DB_CONTAINER_EXITS
            fi
            
            PICSURE_CUSTOM_DB_CONTAINER=&quot;picsure-custom-dbmigration&quot;
            PICSURE_CUSTOM_DB_CONTAINER_EXITS=&quot;$(docker  ps --all --quiet --filter=name=&quot;$PICSURE_CUSTOM_DB_CONTAINER&quot;)&quot;
            echo $PICSURE_CUSTOM_DB_CONTAINER_EXITS
            
            if [ ! -z &quot;$PICSURE_CUSTOM_DB_CONTAINER_EXITS&quot; ]; then
                docker  stop $PICSURE_CUSTOM_DB_CONTAINER_EXITS &amp;&amp; docker  rm $PICSURE_CUSTOM_DB_CONTAINER_EXITS
            fi
        &apos;&apos;&apos;
         cleanWs() 
    }
 
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>