<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>RESOURCE_NAME</name>
          <description>Resource Name</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RESOURCE_DESC</name>
          <description>Resource to access external PIC-SURE installations</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RESOURCE_PATH</name>
          <description>Resource Path (Ex: /foo-bar). do not include any spaces or include leading/trailing slash</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SERVERNAME</name>
          <description>The CNAME or address of the server to be accessed via HTTPS</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TARGET_RESOURCE_ID</name>
          <description>Target Resource UUID (Ex: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TARGET_RESOURCE_TOKEN</name>
          <description>Authentication Token</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>import groovy.json.JsonSlurper;

def retrieveBuildSpecId;
def pipelineBuildId;
def build_hashes = [
    DICTIONARY: false,
    UPLOADER: false
];
def resourceURL = "https://${SERVERNAME}/picsure/"
 
pipeline {
    agent any 
    stages {
        stage(&apos;Retrieve Build Spec&apos;) { 
            steps {
                script {
                    def result = build job: &apos;Retrieve Build Spec&apos;
                    retrieveBuildSpecId = result.number
                }
                script {
                    copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
                    sh &apos;cat build-spec.json&apos;
                    sh &apos;cat pipeline_git_commit.txt&apos;
                    sh &apos;pwd&apos;
                    def buildSpec = new JsonSlurper().parse(new File(&apos;/var/jenkins_home/workspace/Passthrough Resource Pipeline/build-spec.json&apos;))
                    pipelineBuildId = new File(&apos;/var/jenkins_home/workspace/Passthrough Resource Pipeline/pipeline_git_commit.txt&apos;).text.trim()
                    for(def build : buildSpec.application){
                        build_hashes[build.project_job_git_key] = build.git_hash
                    }
                }
            }
        }
        stage(&apos;Create Resource&apos;) { 
            steps {
                script {
                    def result = build job: &apos;Create PIC-SURE PassThrough Resource&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;RESOURCE_NAME&apos;, value: env.RESOURCE_NAME],[$class: &apos;StringParameterValue&apos;, name: &apos;RESOURCE_DESC&apos;, value: env.RESOURCE_DESC],[$class: &apos;StringParameterValue&apos;, name: &apos;RESOURCE_PATH&apos;, value: env.RESOURCE_PATH],[$class: &apos;StringParameterValue&apos;, name: &apos;TARGET_PICSURE_URL&apos;, value: resourceURL],[$class: &apos;StringParameterValue&apos;, name: &apos;TARGET_RESOURCE_ID&apos;, value: env.TARGET_RESOURCE_ID],[$class: &apos;StringParameterValue&apos;, name: &apos;TARGET_RESOURCE_TOKEN&apos;, value: env.TARGET_RESOURCE_TOKEN],[$class: &apos;StringParameterValue&apos;, name: &apos;git_hash&apos;, value: build_hashes[&apos;PSA&apos;]]]
                }
            }
        }
        stage(&apos;Update Truststore&apos;){
            steps {
               script {
                   def result = build job: &apos;Import Server Cert to TrustStore&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;SERVERNAME&apos;, value: env.SERVERNAME], [$class: &apos;StringParameterValue&apos;, name: &apos;CERTALIAS&apos;, value: env.RESOURCE_NAME]]
               }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>